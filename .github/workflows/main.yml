name: Build Test and Push
on: [push]

env:
  IMAGE_NAME: student_service
  REPO_NAME: radu305
  MONGO_URI: mongodb://localhost:27017  # Use 'localhost' for both containers to communicate

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Debug Running Containers
        run: docker ps -a

      - name: Check MongoDB Logs
        run: docker logs $(docker ps -q --filter ancestor=mongo) || echo "No MongoDB logs found"

      - name: Build Docker Image
        run: |
          docker build . -t $REPO_NAME/$IMAGE_NAME

      - name: Run the Application Container
        run: |
          docker run -d --network host -e MONGO_URI="mongodb://localhost:27017" --name student_service_container -p 8080:8080 $REPO_NAME/$IMAGE_NAME:latest

      - name: Wait for MongoDB to be Ready
        run: |
          until docker exec student_service_container sh -c "nc -z localhost 27017"; do
            echo "Waiting for MongoDB to be ready..."
            sleep 5
          done
          echo "MongoDB is ready!"

      - name: Print MongoDB URI Inside Container
        run: docker exec student_service_container printenv | grep MONGO_URI

      - name: List Running Containers
        run: docker ps

      - name: Stream logs in the background
        run: |
          mkdir -p logs
          touch logs/container.log
          (docker logs -f student_service_container | tee logs/container.log) &
          echo "Docker logs streaming started in background."

      - name: Check if Server is Up
        run: |
          sleep 5  # Give the app time to start
          curl http://localhost:8080/tutorial/1.0.0/ui/

      - name: "Check Files Existence"
        uses: andstor/file-existence-action@v2
        with:
          files: "postman/collection.json,postman/environment.json"
          fail: true

      - name: Run API Tests
        id: run-newman
        uses: anthonyvscode/newman-action@master
        with:
          collection: postman/collection.json
          environment: postman/environment.json
          reporters: cli
          bail: true
        continue-on-error: true  # Allows next steps to run even if tests fail.

      - name: Fetch logs from server container
        run: docker logs student_service_container

      - name: Check if Tests Failed
        id: fail-check
        shell: bash
        env:
          JSON_DOC: ${{ steps.run-newman.outputs.summary }}
        run: |
          printf '%s\n' "$JSON_DOC" > summary.json
          cat summary.json
          if grep -q Collection summary.json; then
            echo "failed=false" >> $GITHUB_OUTPUT;
          else
            echo "failed=true" >> $GITHUB_OUTPUT;
          fi

      - name: Fail if Tests Were Empty
        if: ${{ steps.fail-check.outputs.failed == 'true' }}
        run: exit 1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push Image to Docker Hub
        run: | 
          docker push $REPO_NAME/$IMAGE_NAME
